{"version":3,"sources":["store/types/repos.ts","hooks/useTypeSelector.ts","components/Loader/Loader.tsx","components/Repo/Repo.tsx","store/action-creators/repos.ts","api/index.ts","store/action-creators/index.ts","hooks/useActions.ts","components/SearchBar/SearchBar.tsx","components/Pages/Pages.tsx","functions/pagesCreator.ts","components/ReposList/ReposList.tsx","App.tsx","store/reducers/reposReducer.ts","store/index.ts","index.tsx"],"names":["ReposActionTypes","useTypedSelector","useSelector","Loader","className","Repo","repos","state","useState","selectedRepo","setSelectedRepo","repoId","useParams","useEffect","repoFromState","find","repo","id","Number","undefined","name","owner","html_url","description","stargazers_count","language","avatar_url","login","src","alt","String","href","target","rel","fetchRepos","searchQuery","sortBy","currentPage","perPage","dispatch","a","type","FETCH_REPOS","fetch","response","reposFromServer","json","SET_PAGES_COUNT","payload","FETCH_REPOS_SUCCESS","FETCH_REPOS_ERROR","setCurrentPage","currPage","SET_CURRENT_PAGE","setSortParam","SET_SORTBY","setSearchQuery","SET_SEARCH_QUERY","addToFavorites","ADD_TO_FAVORITES","removeFromFavorites","REMOVE_FROM_FAVORITES","setPagesPerPage","count","SET_PER_PAGE","ReposActionCreators","useActions","useDispatch","bindActionCreators","ActionCreators","SearchBar","inputValue","setInputValue","pagesValue","setPagesValue","onSubmit","event","preventDefault","handleSumbitSearchForm","placeholder","value","onChange","required","onClick","handleSumbitPagesForm","Pages","reposCount","pages","pagesCount","i","push","createPages","Math","ceil","role","aria-label","map","page","classNames","aria-current","ReposList","loading","favoritesIds","to","includes","App","loadList","setLoadList","setTimeout","path","element","initialState","error","rootReducer","combineReducers","action","items","filter","total_count","store","createStore","composeWithDevTools","applyMiddleware","thunk","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ae34078.chunk.js","sourcesContent":["export interface ReposState {\n  repos: GitRepo[];\n  loading: boolean;\n  error: string | null;\n  searchQuery: string;\n  sortBy: string;\n  favoritesIds: number[];\n  currentPage:number;\n  perPage: number;\n  reposCount: number;\n}\n\n// eslint-disable-next-line no-shadow\nexport enum ReposActionTypes {\n  FETCH_REPOS = 'FETCH_REPOS',\n  FETCH_REPOS_SUCCESS = 'FETCH_REPOS_SUCCESS',\n  FETCH_REPOS_ERROR = 'FETCH_REPOS_ERROR',\n  SET_SEARCH_QUERY = 'SET_SEARCH_QUERY',\n  SET_SORTBY = 'SET_SORTBY',\n  ADD_TO_FAVORITES = 'ADD_TO_FAVORITES',\n  REMOVE_FROM_FAVORITES = 'REMOVE_FROM_FAVORITES',\n  SET_CURRENT_PAGE = 'SET_CURRENT_PAGE',\n  SET_PER_PAGE = 'SET_PER_PAGE',\n  SET_PAGES_COUNT = 'SET_PAGES_COUNT',\n}\n\nexport interface FetchReposAction {\n  type: ReposActionTypes.FETCH_REPOS,\n}\n\nexport interface FetchReposSuccessAction {\n  type: ReposActionTypes.FETCH_REPOS_SUCCESS,\n  payload: Response,\n}\n\nexport interface FetchReposErrorAction {\n  type: ReposActionTypes.FETCH_REPOS_ERROR,\n  payload: string,\n}\n\nexport interface SetSearchQueryAction {\n  type: ReposActionTypes.SET_SEARCH_QUERY\n  payload: string,\n}\n\nexport interface SetSortByAction {\n  type: ReposActionTypes.SET_SORTBY,\n  payload: string,\n}\n\nexport interface AddToFavoritesAction {\n  type: ReposActionTypes.ADD_TO_FAVORITES,\n  payload: number,\n}\n\nexport interface RemoveFromFavoritesAction {\n  type: ReposActionTypes.REMOVE_FROM_FAVORITES,\n  payload: number,\n}\n\nexport interface SetCurrentPageAction {\n  type: ReposActionTypes.SET_CURRENT_PAGE,\n  payload: number,\n}\n\nexport interface SetPerPageAction {\n  type: ReposActionTypes.SET_PER_PAGE,\n  payload: number,\n}\n\nexport interface SetPagesCountAction {\n  type: ReposActionTypes.SET_PAGES_COUNT,\n  payload: Response,\n}\n\nexport type ReposAction =\n  FetchReposAction\n  | FetchReposSuccessAction\n  | FetchReposErrorAction\n  | SetSearchQueryAction\n  | SetSortByAction\n  | AddToFavoritesAction\n  | RemoveFromFavoritesAction\n  | SetCurrentPageAction\n  | SetPerPageAction\n  | SetPagesCountAction;\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { RootSate } from '../store';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootSate> = useSelector;\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { useTypedSelector } from '../../hooks/useTypeSelector';\nimport { Loader } from '../Loader';\n\nimport './Repo.scss';\n\nexport const Repo: React.FC = () => {\n  const { repos } = useTypedSelector(state => state.repos);\n  const [selectedRepo, setSelectedRepo] = useState<GitRepo | undefined>();\n  const { repoId } = useParams();\n\n  useEffect(() => {\n    const repoFromState = repos.find(repo => repo.id === Number(repoId));\n\n    setSelectedRepo(repoFromState);\n  }, [repoId]);\n\n  if (selectedRepo === undefined) {\n    return (\n      <Loader />\n    );\n  }\n\n  const {\n    name,\n    owner,\n    html_url,\n    description,\n    stargazers_count,\n    language,\n  } = selectedRepo;\n  const { avatar_url, login } = owner;\n\n  return (\n    <div className=\"card card-repo\">\n      <p className=\"card__name\">{name}</p>\n      <div className=\"card__image-box\">\n        <img\n          className=\"card__picture\"\n          src={avatar_url}\n          alt={String(name)}\n        />\n      </div>\n      <p className=\"card__login\">{`User: ${login}`}</p>\n      <p className=\"card__repo-link\">\n        <a\n          href={html_url}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Repo Link\n        </a>\n      </p>\n      <p className=\"description\">Rank</p>\n      <p className=\"card__rank\">{stargazers_count}</p>\n      <p className=\"description\">Language</p>\n      <p className=\"card__language\">{language}</p>\n      <p className=\"description\">Description</p>\n      <p className=\"card__description\">{description}</p>\n    </div>\n  );\n};\n","import { Dispatch } from 'react';\nimport { BASE_URL } from '../../api';\nimport { ReposAction, ReposActionTypes } from '../types/repos';\n\nexport const fetchRepos = (\n  searchQuery: string,\n  sortBy: string,\n  currentPage: number,\n  perPage: number,\n) => {\n  return async (dispatch: Dispatch<ReposAction>) => {\n    try {\n      dispatch({ type: ReposActionTypes.FETCH_REPOS });\n      const response = await fetch(\n        `${BASE_URL}search/repositories?q=${searchQuery}&sort=${sortBy}&page=${currentPage}&per_page=${perPage}`,\n      );\n\n      const reposFromServer = response.json();\n\n      dispatch({\n        type: ReposActionTypes.SET_PAGES_COUNT,\n        payload: await reposFromServer,\n      });\n\n      dispatch({\n        type: ReposActionTypes.FETCH_REPOS_SUCCESS,\n        payload: await reposFromServer,\n      });\n    } catch (error) {\n      dispatch({\n        type: ReposActionTypes.FETCH_REPOS_ERROR,\n        payload: 'An error occurred while loading repositories. Please try again later or contact us',\n      });\n    }\n  };\n};\n\nexport const setCurrentPage = (currPage: number): ReposAction => {\n  return { type: ReposActionTypes.SET_CURRENT_PAGE, payload: currPage };\n};\n\nexport const setSortParam = (sortBy: string): ReposAction => {\n  return { type: ReposActionTypes.SET_SORTBY, payload: sortBy };\n};\n\nexport const setSearchQuery = (searchQuery: string): ReposAction => {\n  return { type: ReposActionTypes.SET_SEARCH_QUERY, payload: searchQuery };\n};\n\nexport const addToFavorites = (repoId: number): ReposAction => {\n  return { type: ReposActionTypes.ADD_TO_FAVORITES, payload: repoId };\n};\n\nexport const removeFromFavorites = (repoId: number): ReposAction => {\n  return { type: ReposActionTypes.REMOVE_FROM_FAVORITES, payload: repoId };\n};\n\nexport const setPagesPerPage = (count: number): ReposAction => {\n  return { type: ReposActionTypes.SET_PER_PAGE, payload: count };\n};\n","export const BASE_URL = 'https://api.github.com/';\n","import * as ReposActionCreators from './repos';\n\nexport default {\n  ...ReposActionCreators,\n};\n","import { useDispatch } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport ActionCreators from '../store/action-creators';\n\nexport const useActions = () => {\n  const dispatch = useDispatch();\n\n  return bindActionCreators(ActionCreators, dispatch);\n};\n","import React, { useState } from 'react';\nimport { useActions } from '../../hooks/useActions';\nimport { useTypedSelector } from '../../hooks/useTypeSelector';\n\nimport './SearchBar.scss';\n\nexport const SearchBar: React.FC = () => {\n  const {\n    setSearchQuery,\n    setSortParam,\n    setCurrentPage,\n    setPagesPerPage,\n  } = useActions();\n\n  const { perPage } = useTypedSelector(state => state.repos);\n\n  const [inputValue, setInputValue] = useState('');\n  const [pagesValue, setPagesValue] = useState(perPage);\n\n  const handleSumbitSearchForm = (event: React.FormEvent) => {\n    event.preventDefault();\n    setCurrentPage(1);\n\n    setSearchQuery(inputValue);\n\n    setInputValue('');\n  };\n\n  const handleSumbitPagesForm = (event: React.FormEvent) => {\n    event.preventDefault();\n    setCurrentPage(1);\n\n    setPagesPerPage(pagesValue);\n\n    setInputValue('');\n  };\n\n  return (\n    <>\n      <form\n        className=\"search-bar__search-form\"\n        onSubmit={(event) => {\n          handleSumbitSearchForm(event);\n        }}\n      >\n        <input\n          className=\"input\"\n          type=\"text\"\n          placeholder=\"Search...\"\n          value={inputValue}\n          onChange={(event) => {\n            setInputValue(event.target.value);\n          }}\n          required\n        />\n        <button\n          type=\"submit\"\n          className=\"button is-warning\"\n        >\n          Search\n        </button>\n      </form>\n      <div className=\"search-bar__button-container\">\n        <button\n          type=\"button\"\n          className=\"button search-bar__sort-button\"\n          onClick={() => {\n            setSortParam('updated');\n          }}\n        >\n          Sort by Update\n        </button>\n        <button\n          type=\"button\"\n          className=\"button search-bar__sort-button\"\n          onClick={() => {\n            setSortParam('stars');\n          }}\n        >\n          Sort by Rank\n        </button>\n        <button\n          type=\"button\"\n          className=\"button search-bar__sort-button\"\n          onClick={() => {\n            setSortParam('forks');\n          }}\n        >\n          Sort by Forks\n        </button>\n      </div>\n      <form\n        className=\"search-bar__set-pages-form\"\n        onSubmit={(event) => {\n          handleSumbitPagesForm(event);\n        }}\n      >\n        <input\n          className=\"input\"\n          type=\"text\"\n          placeholder=\"Items...\"\n          value={pagesValue}\n          onChange={(event) => {\n            setPagesValue(Number(event.target.value));\n          }}\n          required\n        />\n        <button\n          type=\"submit\"\n          className=\"button is-warning\"\n        >\n          Show repos per page\n        </button>\n      </form>\n    </>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useTypedSelector } from '../../hooks/useTypeSelector';\nimport { useActions } from '../../hooks/useActions';\nimport { createPages } from '../../functions/pagesCreator';\nimport './Pages.scss';\n\nexport const Pages: React.FC = () => {\n  const { currentPage, reposCount, perPage } = useTypedSelector(state => state.repos);\n  const { setCurrentPage } = useActions();\n\n  const pages: number[] = [];\n  const pagesCount = Math.ceil(reposCount / perPage);\n\n  createPages(pages, pagesCount, currentPage);\n\n  return (\n    <nav className=\"pagination\" role=\"navigation\" aria-label=\"pagination\">\n      <ul className=\"pagination-list\">\n        {pages.map(page => (\n          <li key={page} className=\"pagination-list__item\">\n            <button\n              type=\"button\"\n              className={classNames('pagination-link',\n                { 'is-current': page === currentPage })}\n              aria-label=\"Page 1\"\n              aria-current=\"page\"\n              onClick={() => {\n                setCurrentPage(page);\n              }}\n            >\n              {page}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n","export function createPages(pages: number[], pagesCount: number, currentPage: number) {\n  if (pagesCount > 10) {\n    if (currentPage > 5) {\n      // eslint-disable-next-line no-plusplus\n      for (let i = currentPage - 4; i <= currentPage + 5; i++) {\n        pages.push(i);\n        if (i === pagesCount) {\n          break;\n        }\n      }\n    } else {\n      // eslint-disable-next-line no-plusplus\n      for (let i = 1; i <= 10; i++) {\n        pages.push(i);\n        if (i === pagesCount) {\n          break;\n        }\n      }\n    }\n  } else {\n    // eslint-disable-next-line no-plusplus\n    for (let i = 1; i <= pagesCount; i++) {\n      pages.push(i);\n    }\n  }\n}\n","import React, { useEffect } from 'react';\nimport 'bulma';\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { useTypedSelector } from '../../hooks/useTypeSelector';\nimport { useActions } from '../../hooks/useActions';\nimport { Loader } from '../Loader';\nimport { SearchBar } from '../SearchBar';\nimport { Pages } from '../Pages';\n\nimport './ReposList.scss';\n\nexport const ReposList: React.FC = () => {\n  const {\n    repos,\n    loading,\n    searchQuery,\n    sortBy,\n    currentPage,\n    perPage,\n    reposCount,\n    favoritesIds,\n  } = useTypedSelector(state => state.repos);\n\n  const {\n    fetchRepos,\n    addToFavorites,\n    removeFromFavorites,\n  } = useActions();\n\n  useEffect(() => {\n    fetchRepos(searchQuery, sortBy, currentPage, perPage);\n  }, [searchQuery, sortBy, currentPage, perPage]);\n\n  const setFavorites = (repoId: number) => {\n    if (favoritesIds.includes(repoId)) {\n      removeFromFavorites(repoId);\n    } else {\n      addToFavorites(repoId);\n    }\n  };\n\n  const setButtonName = (repoId: number) => {\n    if (favoritesIds.includes(repoId)) {\n      return 'Remove from favorites';\n    }\n\n    return 'Add to Favorites';\n  };\n\n  return (\n    <>\n      <div className=\"search-bar repos-list__search-bar\">\n        <SearchBar />\n      </div>\n      <div className=\"box repos-list__info-box\">\n        {`${reposCount || 'No'} repositories were found`}\n      </div>\n      {loading\n        ? <Loader />\n        : (\n          <>\n            <div className=\"repos-list__list\">\n              <div className=\"repos-list__content\">\n                {repos.map(repo => (\n                  <div key={repo.id} className=\"box card repos-list__card\">\n                    <article className=\"media\">\n                      <div className=\"media-left\">\n                        <figure className=\"image is-128x128 card__image-container\">\n                          <img\n                            className=\"card__image\"\n                            src={repo.owner.avatar_url}\n                            alt={repo.name}\n                          />\n                        </figure>\n                      </div>\n                      <div className=\"media-content\">\n                        <div className=\"content\">\n                          <p className=\"content-item\">\n                            <strong className=\"card__title\">{repo.name}</strong>\n                          </p>\n                          <p className=\"content-item\">\n                            <small>{`rank: ${repo.stargazers_count}`}</small>\n                          </p>\n                        </div>\n                      </div>\n                      <Link\n                        type=\"button\"\n                        className=\"button top-button is-primary is-info\"\n                        to={`/${repo.id}`}\n                      >\n                        View more\n                      </Link>\n                      <button\n                        type=\"button\"\n                        className={classNames('button bottom-button',\n                          { 'is-success': !favoritesIds.includes(repo.id) },\n                          { 'is-danger': favoritesIds.includes(repo.id) })}\n                        onClick={() => {\n                          setFavorites(repo.id);\n                        }}\n                      >\n                        {setButtonName(repo.id)}\n                      </button>\n                    </article>\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div className=\"repos-list__pages\">\n              <Pages />\n            </div>\n          </>\n        )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom';\nimport { Repo } from './components/Repo';\nimport { ReposList } from './components/ReposList';\n\nimport './App.scss';\n\nconst App: React.FC = () => {\n  const [loadList, setLoadList] = useState(false);\n\n  setTimeout(() => {\n    setLoadList(true);\n  }, 3000);\n\n  return (\n    <div className=\"App\">\n      {!loadList\n        ? (\n          <div className=\"App__splashscreen\">\n            Andrii Koptiev\n          </div>\n        )\n        : (\n          <div className=\"App_content\">\n            <Routes>\n              <Route\n                path=\"/\"\n                element={<ReposList />}\n              />\n              <Route\n                path=\"/:repoId\"\n                element={<Repo />}\n              />\n              <Route\n                path=\"/home\"\n                element={<Navigate to=\"/\" />}\n              />\n              <Route\n                path=\"*\"\n                element={<Navigate to=\"/\" />}\n              />\n            </Routes>\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReposAction, ReposActionTypes, ReposState } from '../types/repos';\n\nconst initialState: ReposState = {\n  repos: [],\n  loading: false,\n  error: null,\n  searchQuery: '%3E1',\n  sortBy: 'stars',\n  favoritesIds: [],\n  currentPage: 1,\n  perPage: 40,\n  reposCount: 0,\n};\n\nexport const reposReducer = (state = initialState, action: ReposAction) => {\n  switch (action.type) {\n    case ReposActionTypes.FETCH_REPOS:\n      return {\n        ...state,\n        loading: true,\n      };\n\n    case ReposActionTypes.FETCH_REPOS_SUCCESS:\n      return {\n        ...state,\n        repos: [...action.payload.items],\n        loading: false,\n      };\n\n    case ReposActionTypes.FETCH_REPOS_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n\n    case ReposActionTypes.SET_SEARCH_QUERY:\n      return {\n        ...state,\n        searchQuery: action.payload,\n      };\n\n    case ReposActionTypes.SET_SORTBY:\n      return {\n        ...state,\n        sortBy: action.payload,\n      };\n\n    case ReposActionTypes.ADD_TO_FAVORITES:\n      return {\n        ...state,\n        favoritesIds: [...state.favoritesIds, action.payload],\n      };\n\n    case ReposActionTypes.REMOVE_FROM_FAVORITES:\n      return {\n        ...state,\n        favoritesIds: state.favoritesIds.filter(id => id !== action.payload),\n      };\n\n    case ReposActionTypes.SET_CURRENT_PAGE:\n      return {\n        ...state,\n        currentPage: action.payload,\n      };\n\n    case ReposActionTypes.SET_PER_PAGE:\n      return {\n        ...state,\n        perPage: action.payload,\n      };\n\n    case ReposActionTypes.SET_PAGES_COUNT:\n      return {\n        ...state,\n        reposCount: action.payload.total_count,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { reposReducer } from './reducers/reposReducer';\n\nexport const rootReducer = combineReducers({\n  repos: reposReducer,\n});\n\nexport type RootSate = ReturnType<typeof rootReducer>;\n\nexport const store = createStore(rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport { store } from './store';\n\nconst Root = () => (\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}