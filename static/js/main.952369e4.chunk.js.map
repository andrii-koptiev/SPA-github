{"version":3,"sources":["store/types/repos.ts","hooks/useTypeSelector.ts","store/action-creators/repos.ts","api/index.ts","store/action-creators/index.ts","hooks/useActions.ts","components/Pages/Pages.tsx","functions/pagesCreator.ts","components/Loader/Loader.tsx","components/ReposList/ReposList.tsx","components/SearchBar/SearchBar.tsx","App.tsx","store/reducers/reposReducer.ts","store/index.ts","index.tsx"],"names":["ReposActionTypes","useTypedSelector","useSelector","fetchRepos","searchQuery","sortBy","currentPage","perPage","dispatch","a","type","FETCH_REPOS","fetch","response","reposFromServer","json","SET_PAGES_COUNT","payload","FETCH_REPOS_SUCCESS","FETCH_REPOS_ERROR","setCurrentPage","currPage","SET_CURRENT_PAGE","setSortParam","SET_SORTBY","setSearchQuery","SET_SEARCH_QUERY","addToFavorites","repoId","ADD_TO_FAVORITES","removeFromFavorites","REMOVE_FROM_FAVORITES","changeStateRepos","sortedRepos","CHANGE_STATE_REPOS","ReposActionCreators","useActions","useDispatch","bindActionCreators","ActionCreators","Pages","state","repos","reposCount","pages","pagesCount","i","push","createPages","Math","ceil","className","role","aria-label","map","page","classNames","aria-current","onClick","Loader","ReposList","loading","favoritesIds","useEffect","repo","src","owner","avatar_url","alt","name","stargazers_count","includes","id","SearchBar","useState","inputValue","setInputValue","onSubmit","event","preventDefault","handleSumbitForm","placeholder","value","onChange","target","required","sort","b","localeCompare","sortByName","App","initialState","error","rootReducer","combineReducers","action","items","filter","SET_PER_PAGE","total_count","store","createStore","composeWithDevTools","applyMiddleware","thunk","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.952369e4.chunk.js","sourcesContent":["export interface ReposState {\n  repos: GitRepo[];\n  loading: boolean;\n  error: string | null;\n  searchQuery: string;\n  sortBy: string;\n  favoritesIds: number[];\n  currentPage:number;\n  perPage: number;\n  reposCount: number;\n}\n\n// eslint-disable-next-line no-shadow\nexport enum ReposActionTypes {\n  FETCH_REPOS = 'FETCH_REPOS',\n  FETCH_REPOS_SUCCESS = 'FETCH_REPOS_SUCCESS',\n  FETCH_REPOS_ERROR = 'FETCH_REPOS_ERROR',\n  SET_SEARCH_QUERY = 'SET_SEARCH_QUERY',\n  SET_SORTBY = 'SET_SORTBY',\n  ADD_TO_FAVORITES = 'ADD_TO_FAVORITES',\n  REMOVE_FROM_FAVORITES = 'REMOVE_FROM_FAVORITES',\n  SET_CURRENT_PAGE = 'SET_CURRENT_PAGE',\n  SET_PER_PAGE = 'SET_PER_PAGE',\n  SET_PAGES_COUNT = 'SET_PAGES_COUNT',\n  CHANGE_STATE_REPOS = 'CHANGE_STATE_REPOS',\n}\n\nexport interface FetchReposAction {\n  type: ReposActionTypes.FETCH_REPOS,\n}\n\nexport interface FetchReposSuccessAction {\n  type: ReposActionTypes.FETCH_REPOS_SUCCESS,\n  payload: Response,\n}\n\nexport interface FetchReposErrorAction {\n  type: ReposActionTypes.FETCH_REPOS_ERROR,\n  payload: string,\n}\n\nexport interface SetSearchQueryAction {\n  type: ReposActionTypes.SET_SEARCH_QUERY\n  payload: string,\n}\n\nexport interface SetSortByAction {\n  type: ReposActionTypes.SET_SORTBY,\n  payload: string,\n}\n\nexport interface AddToFavoritesAction {\n  type: ReposActionTypes.ADD_TO_FAVORITES,\n  payload: number,\n}\n\nexport interface RemoveFromFavoritesAction {\n  type: ReposActionTypes.REMOVE_FROM_FAVORITES,\n  payload: number,\n}\n\nexport interface SetCurrentPageAction {\n  type: ReposActionTypes.SET_CURRENT_PAGE,\n  payload: number,\n}\n\nexport interface SetPerPageAction {\n  type: ReposActionTypes.SET_PER_PAGE,\n  payload: number,\n}\n\nexport interface SetPagesCountAction {\n  type: ReposActionTypes.SET_PAGES_COUNT,\n  payload: Response,\n}\n\nexport interface changeStateReposAction {\n  type: ReposActionTypes.CHANGE_STATE_REPOS,\n  payload: GitRepo[],\n}\n\nexport type ReposAction =\n  FetchReposAction\n  | FetchReposSuccessAction\n  | FetchReposErrorAction\n  | SetSearchQueryAction\n  | SetSortByAction\n  | AddToFavoritesAction\n  | RemoveFromFavoritesAction\n  | SetCurrentPageAction\n  | SetPerPageAction\n  | SetPagesCountAction\n  | changeStateReposAction;\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { RootSate } from '../store';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootSate> = useSelector;\n","import { Dispatch } from 'react';\nimport { BASE_URL } from '../../api';\nimport { ReposAction, ReposActionTypes } from '../types/repos';\n\nexport const fetchRepos = (\n  searchQuery: string,\n  sortBy: string,\n  currentPage: number,\n  perPage: number,\n) => {\n  return async (dispatch: Dispatch<ReposAction>) => {\n    try {\n      dispatch({ type: ReposActionTypes.FETCH_REPOS });\n      const response = await fetch(\n        `${BASE_URL}search/repositories?q=${searchQuery}&sort=${sortBy}&page=${currentPage}&per_page=${perPage}`,\n      );\n\n      const reposFromServer = response.json();\n\n      dispatch({\n        type: ReposActionTypes.SET_PAGES_COUNT,\n        payload: await reposFromServer,\n      });\n\n      dispatch({\n        type: ReposActionTypes.FETCH_REPOS_SUCCESS,\n        payload: await reposFromServer,\n      });\n    } catch (error) {\n      dispatch({\n        type: ReposActionTypes.FETCH_REPOS_ERROR,\n        payload: 'An error occurred while loading repositories. Please try again later or contact us',\n      });\n    }\n  };\n};\n\nexport const setCurrentPage = (currPage: number): ReposAction => {\n  return { type: ReposActionTypes.SET_CURRENT_PAGE, payload: currPage };\n};\n\nexport const setSortParam = (sortBy: string): ReposAction => {\n  return { type: ReposActionTypes.SET_SORTBY, payload: sortBy };\n};\n\nexport const setSearchQuery = (searchQuery: string): ReposAction => {\n  return { type: ReposActionTypes.SET_SEARCH_QUERY, payload: searchQuery };\n};\n\nexport const addToFavorites = (repoId: number): ReposAction => {\n  return { type: ReposActionTypes.ADD_TO_FAVORITES, payload: repoId };\n};\n\nexport const removeFromFavorites = (repoId: number): ReposAction => {\n  return { type: ReposActionTypes.REMOVE_FROM_FAVORITES, payload: repoId };\n};\n\nexport const changeStateRepos = (sortedRepos: GitRepo[]) => {\n  return {\n    type: ReposActionTypes.CHANGE_STATE_REPOS,\n    payload: sortedRepos,\n  };\n};\n","export const BASE_URL = 'https://api.github.com/';\n","import * as ReposActionCreators from './repos';\n\nexport default {\n  ...ReposActionCreators,\n};\n","import { useDispatch } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport ActionCreators from '../store/action-creators';\n\nexport const useActions = () => {\n  const dispatch = useDispatch();\n\n  return bindActionCreators(ActionCreators, dispatch);\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useTypedSelector } from '../../hooks/useTypeSelector';\nimport { useActions } from '../../hooks/useActions';\nimport { createPages } from '../../functions/pagesCreator';\nimport './Pages.scss';\n\nexport const Pages: React.FC = () => {\n  const { currentPage, reposCount, perPage } = useTypedSelector(state => state.repos);\n  const { setCurrentPage } = useActions();\n\n  const pages: number[] = [];\n  const pagesCount = Math.ceil(reposCount / perPage);\n\n  createPages(pages, pagesCount, currentPage);\n\n  return (\n    <nav className=\"pagination\" role=\"navigation\" aria-label=\"pagination\">\n      <ul className=\"pagination-list\">\n        {pages.map(page => (\n          <li key={page} className=\"pagination-list__item\">\n            <button\n              type=\"button\"\n              className={classNames('pagination-link',\n                { 'is-current': page === currentPage })}\n              aria-label=\"Page 1\"\n              aria-current=\"page\"\n              onClick={() => {\n                setCurrentPage(page);\n              }}\n            >\n              {page}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n","export function createPages(pages: number[], pagesCount: number, currentPage: number) {\n  if (pagesCount > 10) {\n    if (currentPage > 5) {\n      // eslint-disable-next-line no-plusplus\n      for (let i = currentPage - 4; i <= currentPage + 5; i++) {\n        pages.push(i);\n        if (i === pagesCount) {\n          break;\n        }\n      }\n    } else {\n      // eslint-disable-next-line no-plusplus\n      for (let i = 1; i <= 10; i++) {\n        pages.push(i);\n        if (i === pagesCount) {\n          break;\n        }\n      }\n    }\n  } else {\n    // eslint-disable-next-line no-plusplus\n    for (let i = 1; i <= pagesCount; i++) {\n      pages.push(i);\n    }\n  }\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect } from 'react';\nimport 'bulma';\nimport classNames from 'classnames';\nimport { useTypedSelector } from '../../hooks/useTypeSelector';\nimport { useActions } from '../../hooks/useActions';\nimport './ReposList.scss';\nimport { Loader } from '../Loader';\n\nexport const ReposList: React.FC = () => {\n  const {\n    repos,\n    loading,\n    searchQuery,\n    sortBy,\n    currentPage,\n    perPage,\n    reposCount,\n    favoritesIds,\n  } = useTypedSelector(state => state.repos);\n  const { fetchRepos, addToFavorites, removeFromFavorites } = useActions();\n\n  useEffect(() => {\n    fetchRepos(searchQuery, sortBy, currentPage, perPage);\n  }, [searchQuery, sortBy, currentPage, perPage]);\n\n  const setFavorites = (repoId: number) => {\n    if (favoritesIds.includes(repoId)) {\n      removeFromFavorites(repoId);\n    } else {\n      addToFavorites(repoId);\n    }\n  };\n\n  const setButtonName = (repoId: number) => {\n    if (favoritesIds.includes(repoId)) {\n      return 'Remove from favorites';\n    }\n\n    return 'Add to Favorites';\n  };\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <div className=\"box\">\n        {`${reposCount || 'No'} repositories were found`}\n      </div>\n      <div className=\"content__repos-list\">\n        {repos.map(repo => (\n          <div key={repo.id} className=\"box repos-list__box\">\n            <article className=\"media\">\n              <div className=\"media-left\">\n                <figure className=\"image is-128x128\">\n                  <img src={repo.owner.avatar_url} alt={repo.name} />\n                </figure>\n              </div>\n              <div className=\"media-content\">\n                <div className=\"content\">\n                  <p className=\"content-item\">\n                    <strong>{repo.name}</strong>\n                  </p>\n                  <p className=\"content-item\">\n                    <small>{`rank: ${repo.stargazers_count}`}</small>\n                  </p>\n                </div>\n              </div>\n              <button\n                type=\"button\"\n                className=\"button top-button is-primary is-info\"\n              >\n                View more\n              </button>\n              <button\n                type=\"button\"\n                className={classNames('button',\n                  { 'is-success': !favoritesIds.includes(repo.id) },\n                  { 'is-danger': favoritesIds.includes(repo.id) })}\n                onClick={() => {\n                  setFavorites(repo.id);\n                }}\n              >\n                {setButtonName(repo.id)}\n              </button>\n            </article>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useActions } from '../../hooks/useActions';\nimport { useTypedSelector } from '../../hooks/useTypeSelector';\n\nexport const SearchBar: React.FC = () => {\n  const {\n    setSearchQuery,\n    setSortParam,\n    setCurrentPage,\n    changeStateRepos,\n  } = useActions();\n  const { repos } = useTypedSelector(state => state.repos);\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleSumbitForm = (event: React.FormEvent) => {\n    event.preventDefault();\n    setCurrentPage(1);\n\n    setSearchQuery(inputValue);\n\n    setInputValue('');\n  };\n\n  const sortByName = () => {\n    const sortedRepos = [...repos].sort((a, b) => a.name.localeCompare(b.name));\n\n    changeStateRepos(sortedRepos);\n  };\n\n  return (\n    <>\n      <form\n        className=\"search-form\"\n        onSubmit={(event) => {\n          handleSumbitForm(event);\n        }}\n      >\n        <input\n          className=\"input\"\n          type=\"text\"\n          placeholder=\"Search...\"\n          value={inputValue}\n          onChange={(event) => {\n            setInputValue(event.target.value);\n          }}\n          required\n        />\n        <button\n          type=\"submit\"\n          className=\"button is-warning\"\n        >\n          Search\n        </button>\n      </form>\n      <div className=\"search-bar__button-container\">\n        <button\n          type=\"button\"\n          className=\"button search-bar__button\"\n          onClick={() => {\n            setSortParam('updated');\n          }}\n        >\n          Sort by Update\n        </button>\n        <button\n          type=\"button\"\n          className=\"button search-bar__button\"\n          onClick={() => {\n            setSortParam('stars');\n          }}\n        >\n          Sort by Rank\n        </button>\n        <button\n          type=\"button\"\n          className=\"button search-bar__button\"\n          onClick={() => {\n            sortByName();\n          }}\n        >\n          Sort by Name\n        </button>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { Pages } from './components/Pages';\nimport { ReposList } from './components/ReposList';\nimport { SearchBar } from './components/SearchBar';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__search-bar search-bar\">\n        <SearchBar />\n      </div>\n      <div className=\"App_content\">\n        <ReposList />\n        <div className=\"App_pages\">\n          <Pages />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReposAction, ReposActionTypes, ReposState } from '../types/repos';\n\nconst initialState: ReposState = {\n  repos: [],\n  loading: false,\n  error: null,\n  searchQuery: '%3E1',\n  sortBy: 'stars',\n  favoritesIds: [],\n  currentPage: 1,\n  perPage: 40,\n  reposCount: 0,\n};\n\nexport const reposReducer = (state = initialState, action: ReposAction) => {\n  switch (action.type) {\n    case ReposActionTypes.FETCH_REPOS:\n      return {\n        ...state,\n        loading: true,\n      };\n\n    case ReposActionTypes.FETCH_REPOS_SUCCESS:\n      return {\n        ...state,\n        repos: [...action.payload.items],\n        loading: false,\n      };\n\n    case ReposActionTypes.FETCH_REPOS_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n\n    case ReposActionTypes.SET_SEARCH_QUERY:\n      return {\n        ...state,\n        searchQuery: action.payload,\n      };\n\n    case ReposActionTypes.SET_SORTBY:\n      return {\n        ...state,\n        sortBy: action.payload,\n      };\n\n    case ReposActionTypes.ADD_TO_FAVORITES:\n      return {\n        ...state,\n        favoritesIds: [...state.favoritesIds, action.payload],\n      };\n\n    case ReposActionTypes.REMOVE_FROM_FAVORITES:\n      return {\n        ...state,\n        favoritesIds: state.favoritesIds.filter(id => id !== action.payload),\n      };\n\n    case ReposActionTypes.SET_CURRENT_PAGE:\n      return {\n        ...state,\n        currentPage: action.payload,\n      };\n\n    case ReposActionTypes.SET_PER_PAGE:\n      return {\n        ...state,\n        perPage: action.payload,\n      };\n\n    case ReposActionTypes.SET_PAGES_COUNT:\n      return {\n        ...state,\n        reposCount: action.payload.total_count,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { reposReducer } from './reducers/reposReducer';\n\nexport const rootReducer = combineReducers({\n  repos: reposReducer,\n});\n\nexport type RootSate = ReturnType<typeof rootReducer>;\n\nexport const store = createStore(rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}